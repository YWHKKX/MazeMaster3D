extends Node3D
class_name LayeredGridMapSystem

## üèóÔ∏è ÂàÜÂ±ÇGridMapÁÆ°ÁêÜÁ≥ªÁªü
## ÁÆ°ÁêÜÂ§ö‰∏™GridMapÂ±ÇÔºåÂÆûÁé∞Â§çÊùÇÂª∫Á≠ëÁöÑÊ®°ÂùóÂåñÊûÑÂª∫

signal layer_updated(layer_name: String, cell_count: int)
signal building_assembled(building_name: String)

# ÂàÜÂ±ÇGridMapËäÇÁÇπ
var floor_layer: GridMap
var wall_layer: GridMap
var ceiling_layer: GridMap
var decoration_layer: GridMap

# Â±ÇÁÆ°ÁêÜÂô®
var floor_manager: FloorLayerManager
var wall_manager: WallLayerManager
var ceiling_manager: CeilingLayerManager
var decoration_manager: DecorationLayerManager

# ÁªÑ‰ª∂Âèò‰ΩìÁÆ°ÁêÜÂô®
var component_variant_manager: ComponentVariantManager
var material_system: MaterialSystem

# Âª∫Á≠ëÈÖçÁΩÆ
var building_config: Dictionary = {}
var layer_configs: Dictionary = {}

func _ready():
	"""ÂàùÂßãÂåñÂàÜÂ±ÇGridMapÁ≥ªÁªü"""
	_setup_layers()
	_setup_managers()
	_setup_material_system()
	
	# Âª∂ËøüËÆæÁΩÆGridMapÂºïÁî®ÔºåÁ°Æ‰øùÁÆ°ÁêÜÂô®ÂÆåÂÖ®ÂàùÂßãÂåñ
	call_deferred("_setup_gridmap_references")
	
	LogManager.info("üèóÔ∏è [LayeredGridMapSystem] ÂàÜÂ±ÇGridMapÁ≥ªÁªüÂàùÂßãÂåñÂÆåÊàê")


func _setup_layers():
	"""ËÆæÁΩÆÂêÑÂ±ÇGridMap"""
	# ÂàõÂª∫ÂêÑÂ±ÇGridMapËäÇÁÇπ
	floor_layer = GridMap.new()
	wall_layer = GridMap.new()
	ceiling_layer = GridMap.new()
	decoration_layer = GridMap.new()
	
	# Âú∞Èù¢Â±ÇËÆæÁΩÆ
	floor_layer.name = "FloorLayer"
	floor_layer.cell_size = Vector3(0.33, 0.33, 0.33)
	# ÊöÇÊó∂‰ΩøÁî®Á©∫ÁöÑMeshLibraryÔºåÁ®çÂêéÁî±Â±ÇÁÆ°ÁêÜÂô®ËÆæÁΩÆ
	floor_layer.mesh_library = MeshLibrary.new()
	add_child(floor_layer)
	
	# Â¢ôÂ£ÅÂ±ÇËÆæÁΩÆ
	wall_layer.name = "WallLayer"
	wall_layer.cell_size = Vector3(0.33, 0.33, 0.33)
	wall_layer.mesh_library = MeshLibrary.new()
	add_child(wall_layer)
	
	# Â§©Ëä±ÊùøÂ±ÇËÆæÁΩÆ
	ceiling_layer.name = "CeilingLayer"
	ceiling_layer.cell_size = Vector3(0.33, 0.33, 0.33)
	ceiling_layer.mesh_library = MeshLibrary.new()
	add_child(ceiling_layer)
	
	# Ë£ÖÈ•∞Â±ÇËÆæÁΩÆ
	decoration_layer.name = "DecorationLayer"
	decoration_layer.cell_size = Vector3(0.33, 0.33, 0.33)
	decoration_layer.mesh_library = MeshLibrary.new()
	add_child(decoration_layer)


func _setup_managers():
	"""ËÆæÁΩÆÂ±ÇÁÆ°ÁêÜÂô®"""
	floor_manager = FloorLayerManager.new()
	wall_manager = WallLayerManager.new()
	ceiling_manager = CeilingLayerManager.new()
	decoration_manager = DecorationLayerManager.new()
	
	# ÂÖàÊ∑ªÂä†Âà∞Âú∫ÊôØÊ†ë
	add_child(floor_manager)
	add_child(wall_manager)
	add_child(ceiling_manager)
	add_child(decoration_manager)

func _setup_gridmap_references():
	"""ËÆæÁΩÆGridMapÂºïÁî®"""
	# ËÆæÁΩÆÂ±ÇÂºïÁî®
	floor_manager.set_gridmap(floor_layer)
	wall_manager.set_gridmap(wall_layer)
	ceiling_manager.set_gridmap(ceiling_layer)
	decoration_manager.set_gridmap(decoration_layer)
	
	LogManager.info("üîß [LayeredGridMapSystem] GridMapÂºïÁî®ËÆæÁΩÆÂÆåÊàê")


func _setup_material_system():
	"""ËÆæÁΩÆÊùêË¥®Á≥ªÁªü"""
	material_system = MaterialSystem.new()
	component_variant_manager = ComponentVariantManager.new()
	
	add_child(material_system)
	add_child(component_variant_manager)


func assemble_building(building_template: Dictionary, building_name: String):
	"""ÁªÑË£ÖÂª∫Á≠ë"""
	LogManager.info("üèóÔ∏è [LayeredGridMapSystem] ÂºÄÂßãÁªÑË£ÖÂª∫Á≠ë: %s" % building_name)
	
	# Ê∏ÖÁ©∫ÊâÄÊúâÂ±Ç
	clear_all_layers()
	
	# Ëß£ÊûêÂª∫Á≠ëÊ®°Êùø
	var floor_data = building_template.get("floor", {})
	var wall_data = building_template.get("wall", {})
	var ceiling_data = building_template.get("ceiling", {})
	var decoration_data = building_template.get("decoration", {})
	
	# ÁªÑË£ÖÂêÑÂ±Ç
	floor_manager.assemble_layer(floor_data)
	wall_manager.assemble_layer(wall_data)
	ceiling_manager.assemble_layer(ceiling_data)
	decoration_manager.assemble_layer(decoration_data)
	
	# ÂèëÂ∞ÑÂÆåÊàê‰ø°Âè∑
	building_assembled.emit(building_name)
	LogManager.info("‚úÖ [LayeredGridMapSystem] Âª∫Á≠ëÁªÑË£ÖÂÆåÊàê: %s" % building_name)


func clear_all_layers():
	"""Ê∏ÖÁ©∫ÊâÄÊúâÂ±Ç"""
	floor_layer.clear()
	wall_layer.clear()
	ceiling_layer.clear()
	decoration_layer.clear()
	
	LogManager.info("üßπ [LayeredGridMapSystem] ÊâÄÊúâÂ±ÇÂ∑≤Ê∏ÖÁ©∫")


func get_layer_by_name(layer_name: String) -> GridMap:
	"""Ê†πÊçÆÂêçÁß∞Ëé∑ÂèñÂ±Ç"""
	match layer_name:
		"floor":
			return floor_layer
		"wall":
			return wall_layer
		"ceiling":
			return ceiling_layer
		"decoration":
			return decoration_layer
		_:
			LogManager.warning("‚ö†Ô∏è [LayeredGridMapSystem] Êú™Áü•Â±ÇÂêçÁß∞: %s" % layer_name)
			return null


func get_layer_manager_by_name(layer_name: String) -> Node:
	"""Ê†πÊçÆÂêçÁß∞Ëé∑ÂèñÂ±ÇÁÆ°ÁêÜÂô®"""
	match layer_name:
		"floor":
			return floor_manager
		"wall":
			return wall_manager
		"ceiling":
			return ceiling_manager
		"decoration":
			return decoration_manager
		_:
			LogManager.warning("‚ö†Ô∏è [LayeredGridMapSystem] Êú™Áü•Â±ÇÁÆ°ÁêÜÂô®ÂêçÁß∞: %s" % layer_name)
			return null


func set_building_config(config: Dictionary):
	"""ËÆæÁΩÆÂª∫Á≠ëÈÖçÁΩÆ"""
	building_config = config
	layer_configs = config.get("layers", {})
	
	# Â∫îÁî®Â±ÇÈÖçÁΩÆ
	for layer_name in layer_configs:
		var manager = get_layer_manager_by_name(layer_name)
		if manager:
			manager.set_config(layer_configs[layer_name])


func get_building_info() -> Dictionary:
	"""Ëé∑ÂèñÂª∫Á≠ë‰ø°ÊÅØ"""
	return {
		"floor_cells": floor_layer.get_used_cells().size(),
		"wall_cells": wall_layer.get_used_cells().size(),
		"ceiling_cells": ceiling_layer.get_used_cells().size(),
		"decoration_cells": decoration_layer.get_used_cells().size(),
		"total_cells": floor_layer.get_used_cells().size() + wall_layer.get_used_cells().size() + ceiling_layer.get_used_cells().size() + decoration_layer.get_used_cells().size()
	}
